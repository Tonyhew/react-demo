"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _UIApiContext = _interopRequireDefault(require("../UIApiContext"));

var _RoutePathTree = _interopRequireDefault(require("./RoutePathTree"));

var _PageFoldersTreeData = _interopRequireDefault(require("./PageFoldersTreeData"));

var _InfoToolTip = _interopRequireDefault(require("./InfoToolTip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * 添加模板的表单，选择路径和文件夹
 */
var AddBlockForm = function AddBlockForm(_ref) {
  var visible = _ref.visible;

  var _useContext = (0, _react.useContext)(_UIApiContext.default),
      api = _useContext.api;

  var intl = api.intl;
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_antd.Form.Item, {
    name: "routePath",
    label: _react.default.createElement(_InfoToolTip.default, {
      title: intl({
        id: 'org.umi.ui.blocks.adder.routePath'
      }),
      placeholder: intl({
        id: 'org.umi.ui.blocks.adder.routePath.placeholder'
      })
    }),
    rules: [{
      required: true,
      message: intl({
        id: 'org.umi.ui.blocks.adder.routePath.required'
      })
    }, {
      validator: function validator(rule, value) {
        var _ref2, exists;

        return regeneratorRuntime.async(function validator$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(value === '/')) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                _context.next = 4;
                return regeneratorRuntime.awrap(api.callRemote({
                  type: 'org.umi.block.checkExistRoute',
                  payload: {
                    path: value.toLowerCase()
                  }
                }));

              case 4:
                _ref2 = _context.sent;
                exists = _ref2.exists;

                if (!exists) {
                  _context.next = 8;
                  break;
                }

                throw new Error(intl({
                  id: 'org.umi.ui.blocks.adder.routePath.exist'
                }));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        });
      }
    }]
  }, _react.default.createElement(_RoutePathTree.default, {
    visible: visible
  })), _react.default.createElement(_antd.Form.Item, {
    name: "path",
    label: _react.default.createElement(_InfoToolTip.default, {
      title: intl({
        id: 'org.umi.ui.blocks.adder.templatePath'
      }),
      placeholder: intl({
        id: 'org.umi.ui.blocks.adder.templatePath.tooltip'
      })
    }),
    rules: [{
      required: true,
      message: intl({
        id: 'org.umi.ui.blocks.adder.templatePath.required'
      })
    }, {
      validator: function validator(rule, filePath) {
        var _ref3, exists;

        return regeneratorRuntime.async(function validator$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(filePath === '/')) {
                  _context2.next = 2;
                  break;
                }

                throw new Error(intl({
                  id: 'org.umi.ui.blocks.adder.templatePath.root'
                }));

              case 2:
                _context2.next = 4;
                return regeneratorRuntime.awrap(api.callRemote({
                  type: 'org.umi.block.checkExistFilePath',
                  payload: {
                    path: filePath
                  }
                }));

              case 4:
                _ref3 = _context2.sent;
                exists = _ref3.exists;

                if (!exists) {
                  _context2.next = 8;
                  break;
                }

                throw new Error(intl({
                  id: 'org.umi.ui.blocks.adder.templatePath.exist'
                }));

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        });
      }
    }]
  }, _react.default.createElement(_PageFoldersTreeData.default, {
    visible: visible
  })));
};

var _default = AddBlockForm;
exports.default = _default;